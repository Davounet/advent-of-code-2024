const input = `.........................p........................
......................h....C............M.........
..............................p....U..............
..5..................p............................
..6z...........................................C..
...............c...........zV.....................
...5.....c........................................
.Z.............h........S...z....9................
.O............................9...z........M..C...
..O....5..............................F..M..C.....
..Z.........5.c...............M....V..............
........ZO................q.......................
s...O................h..Uq.....7V...........4.....
.q.g..............c.............p.......4.........
............hZ.............................4G.....
6s...........................U.Q.....3............
.......6.................9.......Q.............3..
....s..D.........................6................
.............................................FL...
..................................................
..g...D.........q.....f.......Q...F....L......7...
...............2.........f.............V.L...4....
...................2.s...................f3......G
....g...........................v......7P.........
..2..g.............d.....v...........P.......1....
..............u.........f.............L........G..
.........l.D....u...............d........o..P.....
..................8...............9..1......o...7.
............l.....................................
...................l...S...........F.......o..U...
.......................u...S......................
..........l....u...............m...........P....G.
......................................1.8.......o.
..................................................
..................v.......S................0......
.............v........d.....1.....................
..................................................
..........D....................................0..
...................m.............H..........0.....
...................................d......0.......
..................................................
....Q.............................................
................................H.................
........................H....................8....
..................................................
..................................................
.........................................8........
.......................H3.........................
............................m.....................
................................m.................`

const test = `............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`

const map = input.split('\n').map(r => r.split(''))
const limits = { x: map[0].length, y: map.length }

const result1 = getAntinodes1(map)
console.log({ result1 })

const result2 = getAntinodes2(map)
console.log({ result2 })

function getAntinodes1(map) {
  const antennas = map.reduce((store, row, y) => {
    row.forEach((c, x) => {
      if (c !== '.') {
        store[c] = store[c] ?? []
        store[c].push([x, y])
      }
    })
    return store
  }, {})
  const antinodes = Object.keys(antennas).reduce((store, frequency) => {
    const freqAntennas = antennas[frequency]
    store[frequency] = []

    freqAntennas.forEach((c1, i) => {
      freqAntennas.forEach((c2, j) => {
        if (j <= i) return
        const anti1 = [2 * c1[0] - c2[0], 2 * c1[1] - c2[1]]
        const anti2 = [2 * c2[0] - c1[0], 2 * c2[1] - c1[1]]
        store[frequency].push(anti1, anti2)
      })
    })
    return store
  }, {})

  const uniqAntinodes = Object.keys(antennas).reduce((set, frequency) => {
    antinodes[frequency]
      .filter(inBounds)
      .map(([x, y]) => `${x}:${y}`)
      .forEach(s => set.add(s))
    return set
  }, new Set())

  return uniqAntinodes.size
}

function getAntinodes2(map) {
  const output = structuredClone(map)
  const antennas = map.reduce((store, row, y) => {
    row.forEach((c, x) => {
      if (c !== '.') {
        store[c] = store[c] ?? []
        store[c].push([x, y])
      }
    })
    return store
  }, {})

  Object.keys(antennas).forEach(frequency => {
    const list = antennas[frequency]
    list.forEach((a1, i) => {
      list.forEach((a2, j) => {
        if (j <= i) return
        addAntinodes({ a1, a2, output })
      })
    })
  })

  const sum = output.reduce((s1, row) => s1 + row.reduce((s2, cell) => s2 + (cell === '#' ? 1 : 0), 0), 0)
  return sum
}

function addAntinodes({ a1, a2, output }) {
  const vector = [a2[0] - a1[0], a2[1] - a1[1]]

  let coords = [a1[0], a1[1]]
  let i = 1
  while (inBounds(coords)) {
    output[coords[1]][coords[0]] = '#'
    coords = [coords[0] + vector[0], coords[1] + vector[1]]
    i++
  }

  coords = [a1[0], a1[1]]
  i = 1
  while (inBounds(coords)) {
    output[coords[1]][coords[0]] = '#'
    coords = [coords[0] - vector[0], coords[1] - vector[1]]
    i++
  }
}
function dumpMap(display) {
  display.forEach(row => console.log(row.join('')))
}
function inBounds([x, y]) {
  return x >= 0 && x < limits.x && y >= 0 && y < limits.y
}
